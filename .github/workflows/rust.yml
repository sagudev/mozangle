name: Rust

on:
  push:
    branches-ignore:
      - gh-readonly-queue/**
      - master
  pull_request:
  merge_group:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config m4 python3 python3-distutils llvm llvm-dev lld libclang-dev clang libx11-dev
      - name: Run tests
        if: contains(matrix.os, 'windows')
        run: cargo test --verbose --features "egl build_dlls"
      - name: Run test (POSIX)
        if: ${{ !contains(matrix.os, 'windows') }}
        env:
          CC: clang
          CXX: clang++
        run: |
          clang -x c++ -I gfx/angle/checkout/include -std=c++14 -DANGLE_ENABLE_DEBUG_ANNOTATIONS -DANGLE_ENABLE_ESSL -DANGLE_ENABLE_GLSL -DANGLE_ENABLE_HLSL -DANGLE_ENABLE_KEYEDMUTEX -DANGLE_SKIP_DXGI_1_2_CHECK -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNOMINMAX -DNTDDI_VERSION=0x0A000003 -DUNICODE -DWINVER=0x0A00 -D_ATL_NO_OPENGL -D_CRT_RAND_S -D_CRT_SECURE_NO_DEPRECATE -D_HAS_EXCEPTIONS=0 -D_SCL_SECURE_NO_DEPRECATE -D_SECURE_ATL -D_UNICODE -D__NDK_FPABI__= -I gfx/angle/checkout/include/ -I gfx/angle/checkout/out/gen/angle/ -I gfx/angle/checkout/src/ -I gfx/angle/checkout/src/common/third_party/base/ -m64 -msse2 ./src/shaders/glslang-c.cpp
          cargo test --verbose

  build_result:
    name: homu build finished
    runs-on: ubuntu-latest
    needs:
      - "build"

    steps:
      - name: Mark the job as successful
        run: exit 0
        if: success()
      - name: Mark the job as unsuccessful
        run: exit 1
        if: "!success()"
